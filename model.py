# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZWfrW5shAaUSZd5mIMe7dWs-w_6h2qx5
"""

# 1. Print the full metadata section
print("Metadata:", data.get("metadata"))

# 2. Print the company name and paid-up capital
company_info = data.get("data", {}).get("company", {})
print("Company Name:", company_info.get("legal_name"))
print("Paid-up Capital:", company_info.get("paid_up_capital"))

# 3. Check for missing PAN and website, and assign FLAGS
pan = company_info.get("pan")
website = company_info.get("website")

pan_flag = FLAGS.WHITE if not pan else FLAGS.GREEN
website_flag = FLAGS.WHITE if not website else FLAGS.GREEN

print(f"PAN Flag: {pan_flag}, Website Flag: {website_flag}")

import json
import datetime

class FLAGS:
    GREEN = 1
    AMBER = 2
    RED = 0
    MEDIUM_RISK = 3  # display purpose only
    WHITE = 4  # data is missing for this field

def latest_financial_index(data: dict) -> int:
    financials = data.get("data", {}).get("financials", [])
    latest_index = None
    latest_date = None

    for index, financial in enumerate(financials):
        if financial.get("nature") == "STANDALONE":
            date_str = financial.get("year")
            if date_str:
                try:
                    current_date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
                    print(f"Valid standalone entry at index {index}: {current_date}")
                except ValueError:
                    print(f"Invalid date format in entry {index}: {date_str}")
                    continue

                if latest_date is None or current_date > latest_date:
                    latest_date = current_date
                    latest_index = index

    return latest_index if latest_index is not None else 0

def calculate_total_revenue(data: dict, financial_index: int) -> float:
    financials = data.get("data", {}).get("financials", [])
    if financial_index < 0 or financial_index >= len(financials):
        print(f"Invalid index: {financial_index}. Returning 0.")
        return 0.0

    financial_entry = financials[financial_index]
    pnl = financial_entry.get("pnl", {})
    line_items = pnl.get("lineItems", {})

    # Assuming these keys exist in the JSON structure
    total_revenue = line_items.get("operating_profit", 0) + line_items.get("other income", 0)
    return total_revenue

def total_borrowing(data: dict, financial_index: int) -> float:
    financials = data.get("data", {}).get("financials", [])
    if financial_index < 0 or financial_index >= len(financials):
        print(f"Invalid index: {financial_index}. Returning 0.")
        return 0.0

    financial_entry = financials[financial_index]
    bs = financial_entry.get("bs", {})
    long_term_borrowings = bs.get("long_term_borrowings", 0)
    short_term_borrowings = bs.get("short_term_borrowings", 0)

    total_borrowings = long_term_borrowings + short_term_borrowings
    revenue = calculate_total_revenue(data, financial_index)

    if revenue == 0:
        print("Total revenue is 0. Returning 0 for borrowing ratio.")
        return 0.0

    borrowing_ratio = total_borrowings / revenue
    return borrowing_ratio

def iscr(data: dict, financial_index: int) -> float:
    financials = data.get("data", {}).get("financials", [])
    if financial_index < 0 or financial_index >= len(financials):
        print(f"Invalid index: {financial_index}. Returning 0.")
        return 0.0

    financial_entry = financials[financial_index]
    pnl = financial_entry.get("pnl", {})
    line_items = pnl.get("lineItems", {})

    profit_before_interest_and_tax = line_items.get("profit before_interest_and_tax", 0)  # Adjust field names as necessary
    depreciation = line_items.get("depreciation", 0)
    interest_expense = line_items.get("interest", 0)

    # Calculate ISCR
    is_service_coverage_ratio = (profit_before_interest_and_tax + depreciation + 1) / (interest_expense + 1)
    return is_service_coverage_ratio

def iscr_flag(data: dict, financial_index: int):
    is_service_coverage_ratio = iscr(data, financial_index)
    return FLAGS.GREEN if is_service_coverage_ratio >= 2 else FLAGS.RED

def total_revenue_5cr_flag(data: dict, financial_index: int) -> int:
    total_revenue = calculate_total_revenue(data, financial_index)
    return FLAGS.GREEN if total_revenue >= 50000000 else FLAGS.RED

def borrowing_to_revenue_flag(data: dict, financial_index: int) -> int:
    borrowing_ratio = total_borrowing(data, financial_index)
    return FLAGS.GREEN if borrowing_ratio <= 0.25 else FLAGS.AMBER

with open("data.json", "r") as file:
    data = json.load(file)

index = latest_financial_index(data)
print(f"The index of the latest standalone financial entry is: {index}")
total_revenue = calculate_total_revenue(data, index)
print(f"The total revenue from the financial data at index {index} is: {total_revenue}")
borrowing_ratio = total_borrowing(data, index)
print(f"The ratio of total borrowings to total revenue at index {index} is: {borrowing_ratio:.2f}")

# Determine flags
flag_color = iscr_flag(data, index)
flag_color1 = total_revenue_5cr_flag(data, index)
borrowing_flag_color = borrowing_to_revenue_flag(data, index)

# Print results for flags
if borrowing_flag_color == FLAGS.GREEN:
    print("The borrowing to revenue flag color is: GREEN (Ratio is less than or equal to 0.25)")
elif borrowing_flag_color == FLAGS.AMBER:
    print("The borrowing to revenue flag color is: AMBER (Ratio is greater than 0.25)")

if flag_color1 == FLAGS.GREEN:
    print("The total revenue flag color is: GREEN (Revenue exceeds 50 million)")
elif flag_color1 == FLAGS.RED:
    print("The total revenue flag color is: RED (Revenue is below 50 million)")

if flag_color == FLAGS.GREEN:
    print("The ISCR flag color is: GREEN")
elif flag_color == FLAGS.RED:
    print("The ISCR flag color is: RED")

